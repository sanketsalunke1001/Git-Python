What is a Tuple?
A tuple is like a list, but with one big difference: you can't change it once it's created. Think of it like a sealed container üîí. Once you put items in, you can't add, remove, or change them. A list, on the other hand, is like an open shopping bag üõçÔ∏è where you can easily add or remove items.

You create a tuple by putting items inside parentheses () and separating them with commas.

List (Changeable): my_list = ["apple", "banana", "cherry"]

Tuple (Unchangeable): my_tuple = ("apple", "banana", "cherry")

Why Use a Tuple?
Tuples are useful for data that shouldn't be modified, such as:

The days of the week: ("Monday", "Tuesday", "Wednesday", ...)

Coordinates on a map: (latitude, longitude)

A person's unchanging information: ("John Doe", 30, "Male")

Because they can't be changed, tuples are often faster than lists and are considered "safer" to use for fixed data.


Empty tuple:

empty_tuple = ()
empty_tuple2 = tuple()

Tuple Characteristics

Immutable ‚Äî You can‚Äôt modify elements after creation.

Ordered ‚Äî Elements keep the order they were inserted in.

Allow duplicates ‚Äî (1, 2, 1) is valid.

Can contain different data types ‚Äî (1, "Hello", True).
Accessing Tuple Items
Accessing items in a tuple is exactly the same as with a list. You use indexing starting from 0.

Example:

fruits = ("apple", "banana", "cherry")

print(fruits[0])  # Output: apple

print(fruits[2])  # Output: cherry

print(fruits[-1]) # Output: cherry (counting from the end)

Tuple Slicing
Just like lists, you can get a section of a tuple using slicing.

Example:

numbers = (10, 20, 30, 40, 50, 60)

print(numbers[1:4]) # Output: (20, 30, 40)

print(numbers[:3])  # Output: (10, 20, 30)

Tuple Methods
Since tuples can't be changed, they have far fewer methods than lists. They only have two:

count()
This method tells you how many times a specific item appears in the tuple.

Example:

votes = ("yes", "no", "yes", "yes")

yes_votes = votes.count("yes")

print(yes_votes) # Output: 3

index()
This method tells you the position (index) of the first time a specific item appears.

Example:

colors = ("red", "green", "blue", "green")

green_index = colors.index("green")

print(green_index) # Output: 1


Tuple Unpacking: Introduce the concept of "unpacking" a tuple, which is a neat feature. Show how you can assign each item of a tuple to a separate variable.

coordinates = (10, 20)

x, y = coordinates

print(x) # Output: 10

print(y) # Output: 20

Tuple Operations and Concepts
Concatenation (+) ‚ûï
You can join two or more tuples together using the + operator. This operation creates a new tuple and does not change the original ones. This is similar to combining two pieces of information that should remain fixed.

Example:

personal_info = ("John", 30)

location = ("New York", "USA")

full_profile = personal_info + location

print(full_profile) # Output: ('John', 30, 'New York', 'USA')

Repetition (*) üîÑ
You can create a new tuple by repeating an existing tuple a certain number of times using the * operator.

Example:

short_tuple = ("ha",)

long_tuple = short_tuple * 3

print(long_tuple) # Output: ('ha', 'ha', 'ha')

Unpacking üì¶
This is a powerful and very common feature of tuples. You can "unpack" the items of a tuple into individual variables in a single line. This is like taking items out of a sealed box and putting each one into a separate, labeled container.

Example:

coordinates = (10, 20, 30)

x, y, z = coordinates

print(f"X-coordinate: {x}") # Output: X-coordinate: 10

print(f"Y-coordinate: {y}") # Output: Y-coordinate: 20

print(f"Z-coordinate: {z}") # Output: Z-coordinate: 30

The number of variables on the left must match the number of items in the tuple.

in Keyword ‚úÖ
You can check if an item exists within a tuple using the in keyword, just like with a list.

Example:

weekdays = ("Monday", "Tuesday", "Wednesday")

print("Monday" in weekdays) # Output: True

print("Sunday" in weekdays) # Output: False

Expanded Interactive Activities
"The Tuple Lockbox" Challenge üîí
Challenge students to take a list and a tuple and try to perform the following actions. This will solidify the core difference between the two data structures.

| Feature     | Tuple      | List          |
| ----------- | ---------- | ------------- |
| Mutability  | Immutable  | Mutable       |
| Syntax      | `( )`      | `[ ]`         |
| Methods     | 2          | Many          |
| Performance | Faster     | Slower        |
| Use Case    | Fixed data | Changing data |


Concatenation:
t1 = (1, 2)
t2 = (3, 4)
print(t1 + t2)  # (1, 2, 3, 4)

Repetition:
t = (1, 2)
print(t * 3)  # (1, 2, 1, 2, 1, 2)


Membership Test:
t = (1, 2, 3)
print(2 in t)  # True


Nested Tuples:
nested = ((1, 2), (3, 4))
print(nested[0][1])  # 2