
---------------------------- LOOPS AND CONTROL StatementS ----------------------------

For loop: “Imagine you have a basket of 5 apples. You take each apple one by one and put 
it on the table. That’s what a for loop does – it repeats an action for every item in a collection.”

While loop: “Imagine filling a water tank. You keep pouring water until it’s full. 
That’s a while loop – it runs until a condition becomes false.”


do while loop --- not python 

--------------- FOR LOOP --------------
Used when we know how many times we want to repeat.

Works with sequences (lists, tuples, strings, etc.).

for item in sequence:
    # code block



# Print numbers from 1 to 5
for i in range(1, 6):
    print(i)
 
 
 fruits = ["apple", "banana", "mango"]
for fruit in fruits:
    print("I like", fruit)

l= [1,2,3,4]= list 
l=(1,2,3,4)=tuple
l={1,2,3,4}=set
l={"roll_no":32}=dict


--------------- While loop ---------------
Used when we don’t know how many times the loop will run.

Continues as long as a condition is True.
it runs until a condition becomes false.

while condition:
    # code block


# Print numbers from 1 to 5
i = 1
while i <= 5:
    print(i)
    i += 1  # Important! To avoid infinite loop


i starts at 1.

Loop runs until i becomes 6.

Each iteration increases i by 1.


password = ""
while password != "python":
    password = input("Enter the password: ")
print("Correct password! Access granted.")




---------------------------- Loop Control Statements ----------------------------

---------------------------- break ----------------------------
Stops the loop immediately when a condition is met.
break Statement
Definition:
The break statement is used to immediately terminate the loop in which it appears.

When Python encounters a break, it stops executing the current loop and moves to the first line of code after the loop.

Where it is used:
When a certain condition is met and continuing the loop is unnecessary.

Often used in search operations, validation checks, and menu-driven programs.

Behavior in loops:
Works with both for and while loops.

If there are nested loops, break only stops the innermost loop.

Flow of control:
Loop starts executing.

Each iteration checks if the break statement condition is satisfied.

If yes → loop ends immediately.

Execution resumes after the loop block.



# # Example: Stop the loop when we find the number 7
# print("Demonstrating break:")
# for num in range(1, 11):
#     if num == 7:
#         print("Found 7! Stopping the loop.")
#         break  # Exits the loop immediately
#     print(num)
# print("Loop finished.\n")


---------------------------- continue ----------------------------
Skips the rest of the code inside the loop for the current iteration.
 continue Statement
Definition:
The continue statement is used to skip the remaining code inside the loop for the current iteration and move
on to the next iteration.

The loop itself is not terminated, only the rest of the current cycle is skipped.

Where it is used:
When certain values need to be ignored or skipped without stopping the entire loop.

Often used to skip invalid inputs, specific numbers, or unnecessary calculations.

Behavior in loops:
Works in both for and while loops.

Execution jumps directly to the next iteration, skipping any statements that appear after continue in the loop body.

Flow of control:
Loop starts executing.

When continue is encountered, control moves back to the loop’s condition check (for while) or the next value (for for).

The skipped statements in that iteration are not executed.



# Example: Skip the number 5, continue with the rest
# print("Demonstrating continue:")
# for num in range(1, 8):
#     if num == 5:
#         print("Skipping number 5.")
#         continue  # Skips the rest of the code in this iteration
#     print(num)
# print("Loop finished.\n")



---------------------------- pass ----------------------------
Placeholder – does nothing, used when the code is not yet written.
pass Statement
Definition:
The pass statement is a null operation; it does nothing when executed.

It acts as a placeholder where syntactically some code is required, but you don’t want to execute anything yet.

Where it is used:
To create empty code blocks for future development.

In situations where Python expects an indented block (like inside a loop, function, or class), but no action is required at the moment.

Behavior in loops:
Does not affect the loop flow.

Execution simply moves on to the next statement in the loop body.

Flow of control:
Loop encounters pass.

No operation is performed.

Execution continues normally with the next statement in the loop.

# # Example: Placeholder - do nothing when number is 3
# print("Demonstrating pass:")
# for num in range(1, 6):
#     if num == 3:
#         pass  # Placeholder: code will be added later
#     print(num)
# print("Loop finished.\n")


.................. hello sanket..................